5 kyu
Scramblies

Complete the function scramble(str1, str2) that returns true if a portion of str1 characters can be rearranged to match str2, otherwise returns false.

Notes:

Only lower case letters will be used (a-z). No punctuation or digits will be included.
Performance needs to be considered.
Examples

scramble('rkqodlw', 'world') ==> True
scramble('cedewaraaossoqqyt', 'codewars') ==> True
scramble('katas', 'steak') ==> False


import java.util.HashMap;
public class Scramblies {
    
    public static boolean scramble(String str1, String str2) { 
        if (str1.length() < str2.length()){
            return false;
        }
        HashMap<String,Integer> dictOne = new HashMap<String,Integer>();
        HashMap<String,Integer> dictTwo = new HashMap<String,Integer>();
        for (int i = 0; i < str1.length(); i++) {
            Integer value = dictOne.getOrDefault(String.valueOf(str1.charAt(i)), 0) + 1;
            dictOne.put(String.valueOf(str1.charAt(i)), value);
        }
        System.out.println(dictOne);
        for (int i = 0; i < str2.length(); i++) {
            Integer value = dictTwo.getOrDefault(String.valueOf(str2.charAt(i)), 0) + 1;
            dictTwo.put(String.valueOf(str2.charAt(i)), value);
        }
        System.out.println(dictTwo);
        for (String i: dictTwo.keySet()) {
            System.out.println(dictOne.get(i));
            if (dictOne.get(i) != null){
                if (dictOne.get(i) >= dictTwo.get(i)){
                    continue;
                }else {
                    return false;
                    
                }
            } else {
                return false;
                
            }
        }
      return true;

    }
}


961. N-Repeated Element in Size 2N Array

You are given an integer array nums with the following properties:

nums.length == 2 * n.
nums contains n + 1 unique elements.
Exactly one element of nums is repeated n times.
Return the element that is repeated n times.


class Solution {
    public int repeatedNTimes(int[] nums) {
        HashMap<Integer, Integer> dict = new HashMap<>();
        for (int i: nums){
            Integer value = dict.getOrDefault(i, 0) + 1;
            dict.put(i, value);
            if (value.equals(2)){
                return i;
            }
        }
        return 0;
    }
}
